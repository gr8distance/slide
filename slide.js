// Generated by CoffeeScript 1.7.1
(function() {
  var Slide;

  Slide = (function() {
    var re_set_prop, set_prop;

    function Slide(w, h, images) {
      this.w = w;
      this.h = h;
      this.images = set_prop(this.w, images);
    }

    set_prop = function(w, images) {
      var data, i, _i, _ref;
      data = [];
      for (i = _i = 0, _ref = images.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        data[i] = {
          name: images[i],
          left: i === (images.length - 1) ? 0 - w : i * w,
          multi: i === (images.length - 1) ? -1 : i
        };
      }
      return data;
    };

    re_set_prop = function(w, images) {
      var data, i, _i, _ref;
      data = [];
      for (i = _i = 0, _ref = images.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        data[i] = {
          name: images[i].name,
          left: i === (images.length - 1) ? 0 - w : i * w
        };
      }
      return data;
    };

    Slide.prototype.resize = function(w, h) {
      this.w = w;
      return this.h = h;
    };

    Slide.prototype.left = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.images.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.images[i].multi === (this.images.length - 2)) {
          _results.push(this.images[i].multi = -1);
        } else {
          _results.push(this.images[i].multi += 1);
        }
      }
      return _results;
    };

    Slide.prototype.right = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.images.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.images[i].multi === -1) {
          _results.push(this.images[i].multi = this.images.length - 2);
        } else {
          _results.push(this.images[i].multi -= 1);
        }
      }
      return _results;
    };

    Slide.prototype.biggest_data = function(datas) {
      var big_num, i, _i, _ref;
      big_num = Math.max.apply(null, datas);
      for (i = _i = 0, _ref = datas.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (datas[i] === big_num) {
          return i;
        }
      }
    };

    Slide.prototype.smallest_data = function(datas) {
      var i, small_num, _i, _ref;
      small_num = Math.min.apply(null, datas);
      for (i = _i = 0, _ref = datas.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (datas[i] === small_num) {
          return i;
        }
      }
    };

    Slide.prototype.get_hash_value = function(datas, key) {
      var i, ret_datas, _i, _len;
      ret_datas = [];
      for (_i = 0, _len = datas.length; _i < _len; _i++) {
        i = datas[_i];
        ret_datas.push(i[key]);
      }
      return ret_datas;
    };

    return Slide;

  })();

  $(function() {
    var i, images, s, w, ws, _i, _j, _k, _len, _len1, _ref;
    w = $(window);
    ws = [w.width(), w.height()];
    images = [];
    for (i = _i = 0; _i < 5; i = ++_i) {
      images[i] = "#i" + (i + 1);
    }
    for (_j = 0, _len = images.length; _j < _len; _j++) {
      i = images[_j];
      console.log(i);
    }
    $(".slides").css({
      "height": ws[1]
    });
    s = new Slide(ws[0], ws[1], images);
    _ref = s.images;
    for (_k = 0, _len1 = _ref.length; _k < _len1; _k++) {
      i = _ref[_k];
      $(i.name).css({
        "width": s.w,
        "height": s.h,
        "left": s.w * i.multi
      });
    }
    $(".button").click(function() {
      var attr, _l, _len2, _len3, _m, _ref1, _ref2, _results, _results1;
      attr = $(this).attr("id");
      switch (attr) {
        case "left":
          s.left();
          _ref1 = s.images;
          _results = [];
          for (_l = 0, _len2 = _ref1.length; _l < _len2; _l++) {
            i = _ref1[_l];
            if (i.multi === 0 || i.multi === 1) {
              _results.push($(i.name).animate({
                "left": i.multi * s.w
              }, {
                "duration": 1200,
                "easing": "easeInOutQuint"
              }));
            } else {
              _results.push($(i.name).css({
                "left": i.multi * s.w
              }));
            }
          }
          return _results;
          break;
        case "right":
          s.right();
          _ref2 = s.images;
          _results1 = [];
          for (_m = 0, _len3 = _ref2.length; _m < _len3; _m++) {
            i = _ref2[_m];
            if (i.multi === 0 || i.multi === -1) {
              _results1.push($(i.name).animate({
                "left": i.multi * s.w
              }, {
                "duration": 1200,
                "easing": "easeInOutQuint"
              }));
            } else {
              _results1.push($(i.name).css({
                "left": i.multi * s.w
              }));
            }
          }
          return _results1;
      }
    });
    return w.resize(function() {
      var r, rs, _l, _len2, _ref1, _results;
      r = $(this);
      rs = [r.width(), r.height()];
      $(".slides").css({
        "height": rs[1],
        "width": rs[0]
      });
      s.resize(rs[0], rs[1]);
      _ref1 = s.images;
      _results = [];
      for (_l = 0, _len2 = _ref1.length; _l < _len2; _l++) {
        i = _ref1[_l];
        _results.push($(i.name).css({
          "left": s.w * i.multi,
          "width": s.w,
          "height": s.h
        }));
      }
      return _results;
    });
  });

}).call(this);
